@baseUrl = http://localhost:8000/api/v1/auth
@authToken =
@refreshToken =

### User Registration
# @name registerUser
POST {{baseUrl}}/register/
Content-Type: application/json

{
    "username": "testuser",
    "email": "test@example.com",
    "password": "SecureP@ssw0rd123",
    "password_confirm": "SecureP@ssw0rd123"
}

### User Registration - Password Mismatch Error
POST {{baseUrl}}/register/
Content-Type: application/json

{
    "username": "testuser",
    "email": "test@example.com",
    "password": "SecureP@ssw0rd123",
    "password_confirm": "DifferentPassword"
}

### User Registration - Email Already Exists Error
POST {{baseUrl}}/register/
Content-Type: application/json

{
    "username": "testuser2",
    "email": "test@example.com",
    "password": "SecureP@ssw0rd123",
    "password_confirm": "SecureP@ssw0rd123"
}

### User Registration - Username Already Exists Error
POST {{baseUrl}}/register/
Content-Type: application/json

{
    "username": "testuser",
    "email": "another@example.com",
    "password": "SecureP@ssw0rd123",
    "password_confirm": "SecureP@ssw0rd123"
}

### User Login
# @name loginUser
POST {{baseUrl}}/login/
Content-Type: application/json

{
    "email": "test@example.com",
    "password": "SecureP@ssw0rd123"
}

### Save tokens from login response
@authToken = {{loginUser.response.body.$.access}}
@refreshToken = {{loginUser.response.body.$.refresh}}

### User Login - Invalid Credentials Error
POST {{baseUrl}}/login/
Content-Type: application/json

{
    "email": "test@example.com",
    "password": "WrongPassword"
}

### User Login - Inactive Account Error
POST {{baseUrl}}/login/
Content-Type: application/json

{
    "email": "inactive@example.com",
    "password": "SecureP@ssw0rd123"
}

### Get JWT Tokens Directly
# @name getTokens
POST {{baseUrl}}/token/
Content-Type: application/json

{
    "email": "test@example.com",
    "password": "SecureP@ssw0rd123"
}

### Save tokens from token response
@authToken = {{getTokens.response.body.$.access}}
@refreshToken = {{getTokens.response.body.$.refresh}}

### Refresh Token
# @name refreshAccessToken
POST {{baseUrl}}/token/refresh/
Content-Type: application/json

{
    "refresh": "{{refreshToken}}"
}

### Refresh Token - Invalid Refresh Token Error
POST {{baseUrl}}/token/refresh/
Content-Type: application/json

{
    "refresh": "invalid.refresh.token"
}

### User Logout
POST {{baseUrl}}/logout/
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
    "refresh": "{{refreshToken}}"
}

### User Logout - Without Refresh Token (still valid for session auth)
POST {{baseUrl}}/logout/
Authorization: Bearer {{authToken}}
Content-Type: application/json

{}

### Password Reset Request
POST {{baseUrl}}/password_reset/
Content-Type: application/json

{
    "email": "test@example.com"
}

### Password Reset Request - Email Not Found Error
POST {{baseUrl}}/password_reset/
Content-Type: application/json

{
    "email": "nonexistent@example.com"
}

### Password Reset Confirm
# Note: Replace with actual values received in reset email
POST {{baseUrl}}/password_reset_confirm/
Content-Type: application/json

{
    "uidb64": "example-uid",
    "token": "example-token",
    "new_password": "NewSecureP@ssw0rd",
    "confirm_password": "NewSecureP@ssw0rd"
}

### Password Reset Confirm - Password Mismatch Error
POST {{baseUrl}}/password_reset_confirm/
Content-Type: application/json

{
    "uidb64": "example-uid",
    "token": "example-token",
    "new_password": "NewSecureP@ssw0rd",
    "confirm_password": "DifferentPassword"
}

### Password Reset Confirm - Invalid Token Error
POST {{baseUrl}}/password_reset_confirm/
Content-Type: application/json

{
    "uidb64": "example-uid",
    "token": "invalid-token",
    "new_password": "NewSecureP@ssw0rd",
    "confirm_password": "NewSecureP@ssw0rd"
}

### Get User Profile
GET {{baseUrl}}/profile/
Authorization: Bearer {{authToken}}

### Update User Profile
PATCH {{baseUrl}}/profile/
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
    "first_name": "Test",
    "last_name": "User",
    "phone_number": "12345678901"
}

### Admin Registration
# @name registerAdmin
POST {{baseUrl}}/admin/register/
Authorization: Bearer {{authToken}}  # Must be an admin token
Content-Type: application/json

{
    "username": "adminuser",
    "email": "admin@example.com",
    "password": "SecureP@ssw0rd123",
    "password_confirm": "SecureP@ssw0rd123"
}

### Admin Registration - Unauthorized Error (when non-admin tries to create admin)
POST {{baseUrl}}/admin/register/
Authorization: Bearer {{authToken}}  # Using non-admin token
Content-Type: application/json

{
    "username": "adminuser",
    "email": "admin@example.com",
    "password": "SecureP@ssw0rd123",
    "password_confirm": "SecureP@ssw0rd123"
}

### List All Users (Admin only)
GET {{baseUrl}}/admin/users/
Authorization: Bearer {{authToken}}  # Must be an admin token

### Get Specific User (Admin only)
# Note: Replace with actual UUID
GET {{baseUrl}}/admin/users/123e4567-e89b-12d3-a456-426614174000/
Authorization: Bearer {{authToken}}  # Must be an admin token

### Update Specific User (Admin only)
# Note: Replace with actual UUID
PATCH {{baseUrl}}/admin/users/123e4567-e89b-12d3-a456-426614174000/
Authorization: Bearer {{authToken}}  # Must be an admin token
Content-Type: application/json

{
    "first_name": "Updated",
    "last_name": "Name",
    "is_active": true
}

### Update Specific User - Try to Change Role (should fail)
# Note: Replace with actual UUID
PATCH {{baseUrl}}/admin/users/123e4567-e89b-12d3-a456-426614174000/
Authorization: Bearer {{authToken}}  # Must be an admin token
Content-Type: application/json

{
    "role": "admin"
}

### Delete Specific User (Admin only)
# Note: Replace with actual UUID
DELETE {{baseUrl}}/admin/users/123e4567-e89b-12d3-a456-426614174000/
Authorization: Bearer {{authToken}}  # Must be an admin token

@baseUrl = http://localhost:8000/api
@token = your_jwt_token_here

# Authentication
@name login
POST {{baseUrl}}/auth/login/
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "your_password"
}

# Store token from the response
@authToken = {{login.response.body.token}}

# -------------------- PUBLIC ENDPOINTS --------------------

###

# Public - List Categories
GET {{baseUrl}}/products/categories/

###

# Public - Get Category Details
GET {{baseUrl}}/products/categories/traditional-attire/

###

# Public - List Products
GET {{baseUrl}}/products/products/

###

# Public - List Products with Pagination
GET {{baseUrl}}/products/products/?page=1&page_size=10

###

# Public - Filter Products by Category
GET {{baseUrl}}/products/products/?category=traditional-attire

###

# Public - Filter Products by Price Range
GET {{baseUrl}}/products/products/?min_price=5000&max_price=15000

###

# Public - Filter Products by Gender
GET {{baseUrl}}/products/products/?gender=F

###

# Public - Filter Products by Color
GET {{baseUrl}}/products/products/?color=blue

###

# Public - Filter Products by Size
GET {{baseUrl}}/products/products/?size=L

# Public - Filter Only Available Products
GET {{baseUrl}}/products/products/?available=true

# Public - Filter Only Featured Products
GET {{baseUrl}}/products/products/?featured=true

# Public - Filter Only Discounted Products
GET {{baseUrl}}/products/products/?discounted=true

# Public - Search Products
GET {{baseUrl}}/products/products/?search=ankara

# Public - Order Products by Price (Low to High)
GET {{baseUrl}}/products/products/?ordering=price

# Public - Order Products by Price (High to Low)
GET {{baseUrl}}/products/products/?ordering=-price

# Public - Order Products by Newest First
GET {{baseUrl}}/products/products/?ordering=-created_at

# Public - Order Products by Name
GET {{baseUrl}}/products/products/?ordering=name

# Public - Combined Filters, Search and Ordering
GET {{baseUrl}}/products/products/?category=traditional-attire&gender=F&min_price=5000&search=ankara&ordering=-price

# Public - Get Product Details
GET {{baseUrl}}/products/products/adire-blue-gown/

# -------------------- ADMIN ENDPOINTS --------------------

# Admin - List Categories
GET {{baseUrl}}/products/admin/categories/
Authorization: Bearer {{authToken}}

# Admin - Create Category
POST {{baseUrl}}/products/admin/categories/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Contemporary Designs",
  "description": "Modern Nigerian fashion with contemporary designs"
}

# Admin - Update Category
PUT {{baseUrl}}/products/admin/categories/contemporary-designs/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Contemporary Designs",
  "description": "Updated description for modern Nigerian fashion with contemporary designs"
}

# Admin - Partial Update Category
PATCH {{baseUrl}}/products/admin/categories/contemporary-designs/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "description": "Partially updated description"
}

# Admin - Delete Category
DELETE {{baseUrl}}/products/admin/categories/contemporary-designs/
Authorization: Bearer {{authToken}}

# Admin - List Colors
GET {{baseUrl}}/products/admin/colors/
Authorization: Bearer {{authToken}}

# Admin - Create Color
POST {{baseUrl}}/products/admin/colors/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Navy Blue",
  "color_code": "#000080"
}

# Admin - Update Color
PUT {{baseUrl}}/products/admin/colors/1/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Navy Blue",
  "color_code": "#000088"
}

# Admin - Delete Color
DELETE {{baseUrl}}/products/admin/colors/1/
Authorization: Bearer {{authToken}}

# Admin - List Sizes
GET {{baseUrl}}/products/admin/sizes/
Authorization: Bearer {{authToken}}

# Admin - Create Size
POST {{baseUrl}}/products/admin/sizes/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "XXL",
  "description": "Extra Extra Large"
}

# Admin - Update Size
PUT {{baseUrl}}/products/admin/sizes/1/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "XXL",
  "description": "Updated description for XXL size"
}

# Admin - Delete Size
DELETE {{baseUrl}}/products/admin/sizes/1/
Authorization: Bearer {{authToken}}

# Admin - List Products
GET {{baseUrl}}/products/admin/products/
Authorization: Bearer {{authToken}}

# Admin - Create Product
POST {{baseUrl}}/products/admin/products/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Embroidered Agbada Set",
  "category_id": 1,
  "description": "Luxurious embroidered three-piece Agbada set for special occasions.",
  "gender": "M",
  "price": "35000.00",
  "discount_price": "30000.00",
  "stock_quantity": 10,
  "is_available": true,
  "material": "Cotton and Silk",
  "weight": "0.8",
  "meta_keywords": "agbada, embroidered, traditional, men, formal",
  "meta_description": "Premium embroidered three-piece Agbada set for Nigerian men",
  "is_featured": true
}

# Admin - Get Product Details
GET {{baseUrl}}/products/admin/products/embroidered-agbada-set/
Authorization: Bearer {{authToken}}

# Admin - Update Product
PUT {{baseUrl}}/products/admin/products/embroidered-agbada-set/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Embroidered Agbada Set",
  "category_id": 1,
  "description": "Luxurious hand-embroidered three-piece Agbada set for special occasions and festivities.",
  "gender": "M",
  "price": "38000.00",
  "discount_price": "32000.00",
  "stock_quantity": 8,
  "is_available": true,
  "material": "Premium Cotton and Silk",
  "weight": "0.8",
  "meta_keywords": "agbada, embroidered, traditional, men, formal, wedding",
  "meta_description": "Premium hand-embroidered three-piece Agbada set for Nigerian men",
  "is_featured": true
}

# Admin - Partial Update Product
PATCH {{baseUrl}}/products/admin/products/embroidered-agbada-set/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "price": "40000.00",
  "discount_price": "34000.00",
  "stock_quantity": 5
}

# Admin - Delete Product
DELETE {{baseUrl}}/products/admin/products/embroidered-agbada-set/
Authorization: Bearer {{authToken}}

# Admin - Upload Product Image
# Note: This requires a multipart form request with the image file
POST {{baseUrl}}/products/admin/products/adire-blue-gown/upload-image/
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
Authorization: Bearer {{authToken}}

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="product_image.jpg"
Content-Type: image/jpeg

< ./path/to/your/image.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="alt_text"

Front view of Adire Blue Gown
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="is_featured"

true
------WebKitFormBoundary7MA4YWxkTrZu0gW--

# Admin - Delete Product Image
DELETE {{baseUrl}}/products/admin/products/adire-blue-gown/delete-image/1/
Authorization: Bearer {{authToken}}

# Admin - Add Color Option to Product
POST {{baseUrl}}/products/admin/products/adire-blue-gown/add-color/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "color": 3,
  "stock_quantity": 5,
  "is_available": true
}

# Admin - Remove Color Option from Product
DELETE {{baseUrl}}/products/admin/products/adire-blue-gown/remove-color/3/
Authorization: Bearer {{authToken}}

# Admin - Add Size Option to Product
POST {{baseUrl}}/products/admin/products/adire-blue-gown/add-size/
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "size": 2,
  "stock_quantity": 8,
  "is_available": true
}

# Admin - Remove Size Option from Product
DELETE {{baseUrl}}/products/admin/products/adire-blue-gown/remove-size/2/
Authorization: Bearer {{authToken}}
